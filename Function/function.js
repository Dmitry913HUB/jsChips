"use strict"
/*          Объявление функции           */
{
    // Пример объявления функции:

    function showMessage() {
    alert( 'Всем привет!' );
    }

    // Наша новая функция может быть вызвана по своему имени: showMessage()

    showMessage();
}
/*---------------------------------------*/

/*          Локальные переменные           */
{
    // Переменные, объявленные внутри функции, видны только внутри этой функции.

    function showMessage() {
    let message = "Привет, я JavaScript!"; // локальная переменная

    alert( message );
    }

    showMessage(); // Привет, я JavaScript!

    alert( message ); // <-- будет ошибка, т.к. переменная видна только внутри функции
}
/*---------------------------------------*/

/*          Внешние переменные           */
{
    // Функция обладает полным доступом к внешним переменным и может изменять их значение.
    // Внешняя переменная используется, только если внутри функции нет такой локальной.

    let userName = 'Вася';

    function showMessage() {
        // let userName = "Петя"; // объявляем локальную переменную
        userName = "Петя"; // (1) изменяем значение внешней переменной

        let message = 'Привет, ' + userName;
        alert(message);
    }

    alert( userName ); // Вася перед вызовом функции

    showMessage();

    alert( userName ); // Петя, значение внешней переменной было изменено функцией

}
/*---------------------------------------*/

/*          Параметры           */
{
    // Мы можем передать внутрь функции любую информацию, используя параметры.
    // В нижеприведённом примере функции передаются два параметра: from и text.

    function showMessage(from, text) { // параметры: from, text
        alert(from + ': ' + text);
    }

    showMessage('Аня', 'Привет!'); // Аня: Привет! (*)
    showMessage('Аня', "Как дела?"); // Аня: Как дела? (**)
}
/*---------------------------------------*/

/*          Значения по умолчанию           */
{
    //Если при вызове функции аргумент не был указан, то его значением становится undefined.
    //Это можно исправить задав значение по умолчанию

    function showMessage(from, text = "текст не добавлен") {
        alert( from + ": " + text );
    }

    showMessage("Аня"); // Аня: текст не добавлен

    //В данном случае "текст не добавлен" это строка, но на её месте могло бы быть и более сложное выражение, 
    //которое бы вычислялось и присваивалось при отсутствии параметра.

    function showMessage(from, text = anotherFunction()) {
    // anotherFunction() выполнится только если не передан text
    // результатом будет значение text
    }

    //Ранние версии JavaScript не поддерживали параметры по умолчанию. 
    //Поэтому существуют альтернативные способы, которые могут встречаться в старых скриптах.

    //Например, явная проверка на undefined:

    function showMessage(from, text) {
        if (text === undefined) {
            text = 'текст не добавлен';
        }

        alert( from + ": " + text );
    }

    //Или с помощью оператора ||:

    function showMessage(from, text) {
        // Если значение text ложно, тогда присвоить параметру text значение по умолчанию
        // заметим, что при этом пустая строка text === "" будет также считаться отсутствующим значением
        text = text || 'текст не добавлен';
        
    }

    //Современные движки JavaScript поддерживают оператор нулевого слияния ??. Его использование будет лучшей практикой, 
    //в случае, если большинство ложных значений, таких как 0, следует расценивать как «нормальные».

    function showCount(count) {
        // если count равен undefined или null, показать "неизвестно"
        alert(count ?? "неизвестно");
    }
    showCount(0); // 0
    showCount(null); // неизвестно
    showCount(); // неизвестно
}
/*---------------------------------------*/

/*          Возврат значения           */
{
    // Функция может вернуть результат, который будет передан в вызвавший её код.
    // Простейшим примером может служить функция сложения двух чисел:

    function sum(a, b) {
        return a + b;
    }

    let result = sum(1, 2);
    alert( result ); // 3

    //Возможно использовать return и без значения. Это приведёт к немедленному выходу из функции.

    function showMovie(age) {
        if ( !checkAge(age) ) {
            return;
        }

        alert( "Вам показывается кино" ); // (*)
        // ...
    }

    //Если функция не возвращает значения, это всё равно, как если бы она возвращала undefined:

    function doNothing() { /* пусто */ }

    alert( doNothing() === undefined ); // true

    //Пустой return аналогичен return undefined:

    function doNothing() {
        return;
    }

    alert( doNothing() === undefined ); // true
}
/*---------------------------------------*/

/*          Function Expression           */
{
    //Существует ещё один синтаксис создания функций, который называется Function Expression (Функциональное Выражение).

    //Данный синтаксис позволяет нам создавать новую функцию в середине любого выражения.

    //Это выглядит следующим образом:

    let sayHi = function() {
        alert( "Привет" );
    };
}
/*---------------------------------------*/

/*          Функция – это значение           */
{
    //Давайте повторим: независимо от того, как создаётся функция – она является значением. В обоих приведённых выше примерах функция хранится в переменной sayHi.

    //Мы даже можем вывести это значение с помощью alert:

    function sayHi() {
        alert( "Привет" );
    }

    alert( sayHi ); // выведет код функции

    //Мы можем скопировать функцию в другую переменную:

    function sayHi() {   // (1) создаём
        alert( "Привет" );
    }

    let func = sayHi;    // (2) копируем

    func(); // Привет     // (3) вызываем копию (работает)!
    sayHi(); // Привет    //     эта тоже все ещё работает (почему бы и нет)

    //Мы также могли бы использовать Function Expression для объявления sayHi в первой строке:

    let sayHi = function() { // (1) создаём
        alert( "Привет" );
    };

    //let func = sayHi;

}
/*---------------------------------------*/

/*          Функции-«колбэки»           */
{
    //Наша функция должна задать вопрос question и, в зависимости от того, как ответит пользователь, вызвать yes() или no():

    function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
    }

    function showOk() {
    alert( "Вы согласны." );
    }

    function showCancel() {
    alert( "Вы отменили выполнение." );
    }

    // использование: функции showOk, showCancel передаются в качестве аргументов ask
    ask("Вы согласны?", showOk, showCancel);

    //Мы можем переписать этот пример значительно короче, используя Function Expression:

    function ask(question, yes, no) {
        if (confirm(question)) yes()
        else no();
    }

    ask(
        "Вы согласны?",
        function() { alert("Вы согласились."); },
        function() { alert("Вы отменили выполнение."); }
    );
}
/*---------------------------------------*/

/*          Function Expression в сравнении с Function Declaration           */
{
    //Function Declaration: функция объявляется отдельной конструкцией «function…» в основном потоке кода.

    // Function Declaration
    function sum(a, b) {
        return a + b;
    }

    //Function Expression: функция, созданная внутри другого выражения или синтаксической конструкции. 
    //В данном случае функция создаётся в правой части «выражения присваивания» =:

    // Function Expression
    let sum = function(a, b) {
        return a + b;
    };

    //В результате функции, созданные как Function Declaration, могут быть вызваны раньше своих определений.

    //Например, так будет работать:

    sayHi("Вася"); // Привет, Вася

    function sayHi(name) {
        alert( `Привет, ${name}` );
    }

    //Функция sayHi была создана, когда движок JavaScript подготавливал скрипт к выполнению, и такая функция видна повсюду в этом скрипте.

    //…Если бы это было Function Expression, то такой код вызвал бы ошибку:

    sayHi("Вася"); // ошибка!

    let sayHi = function(name) {  // (*) магии больше нет
        alert( `Привет, ${name}` );
    };

    //для того чтобы предать функцию или создать ее в условных опреатторах необходимо использовать Function Expression во избежания ошибок

    let age = prompt("Сколько Вам лет?", 18);

    let welcome;

    if (age < 18) {

    welcome = function() {
        alert("Привет!");
    };

    } else {

    welcome = function() {
        alert("Здравствуйте!");
    };

    }

    welcome();// теперь всё в порядке

    //Или мы могли бы упростить это ещё сильнее, используя условный оператор ?:

    // let age = prompt("Сколько Вам лет?", 18);

    // let welcome = (age < 18) ?
    // function() { alert("Привет!"); } :
    // function() { alert("Здравствуйте!"); };

    // welcome(); // теперь всё в порядке
}
/*---------------------------------------*/

/*          Стрелочные функции, основы           */
{
    //Он называется «функции-стрелки» или «стрелочные функции» (arrow functions), т.к. выглядит следующим образом:

    //let func = (arg1, arg2, ...argN) => expression;
    //Это создаёт функцию func, которая принимает аргументы arg1..argN, затем вычисляет expression в правой части с их использованием и возвращает результат.

    //Другими словами, это сокращённая версия:

    let func = function(arg1, arg2, ...argN) {
        return expression;
    };

    //хороший пример стрелочной функции

    let sum = (a, b) => a + b;

    /* Эта стрелочная функция представляет собой более короткую форму:

    let sum = function(a, b) {
        return a + b;
    };
    */

    alert( sum(1, 2) ); // 3

    //Если у нас только один аргумент, то круглые скобки вокруг параметров можно опустить, сделав запись ещё короче:

    let double = n => n * 2;
    // примерно тоже что и: let double = function(n) { return n * 2 }

    alert( double(3) ); // 6

    //Если аргументов нет, круглые скобки будут пустыми, но они должны присутствовать:

    let sayHi = () => alert("Hello!");

    sayHi();

    //Стрелочные функции можно использовать так же, как и Function Expression.

    //Например, для динамического создания функции:

    let age = prompt("Сколько Вам лет?", 18);

    let welcome = (age < 18) ?
    () => alert('Привет!') :
    () => alert("Здравствуйте!");

    welcome();
}
/*---------------------------------------*/

/*          Многострочные стрелочные функции          */
{
    let sum = (a, b) => {  // фигурная скобка, открывающая тело многострочной функции
        let result = a + b;
        return result; // если мы используем фигурные скобки, то нам нужно явно указать "return"
      };
      
      alert( sum(1, 2) ); // 3
}
/*---------------------------------------*/

/*          разновидности стрелочных функций          */
{
    // выражение в правой части
    let summ = (a, b) => a + b;

    // многострочный код в фигурных скобках { ... }, здесь нужен return:
    let sum = (a, b) => {
    // ...
        return a + b;
    }

    // без аргументов
    let sayHi = () => alert("Привет");

    // с одним аргументом
    let double = n => n * 2;

}
/*---------------------------------------*/

/*          разновидности стрелочных функций          */
{

}
/*---------------------------------------*/