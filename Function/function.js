"use strict"
/*          Объявление функции           */
{
    // Пример объявления функции:

    function showMessage() {
    alert( 'Всем привет!' );
    }

    // Наша новая функция может быть вызвана по своему имени: showMessage()

    showMessage();
}
/*---------------------------------------*/

/*          Локальные переменные           */
{
    // Переменные, объявленные внутри функции, видны только внутри этой функции.

    function showMessage() {
    let message = "Привет, я JavaScript!"; // локальная переменная

    alert( message );
    }

    showMessage(); // Привет, я JavaScript!

    alert( message ); // <-- будет ошибка, т.к. переменная видна только внутри функции
}
/*---------------------------------------*/

/*          Внешние переменные           */
{
    // Функция обладает полным доступом к внешним переменным и может изменять их значение.
    // Внешняя переменная используется, только если внутри функции нет такой локальной.

    let userName = 'Вася';

    function showMessage() {
        // let userName = "Петя"; // объявляем локальную переменную
        userName = "Петя"; // (1) изменяем значение внешней переменной

        let message = 'Привет, ' + userName;
        alert(message);
    }

    alert( userName ); // Вася перед вызовом функции

    showMessage();

    alert( userName ); // Петя, значение внешней переменной было изменено функцией

}
/*---------------------------------------*/

/*          Параметры           */
{
    // Мы можем передать внутрь функции любую информацию, используя параметры.
    // В нижеприведённом примере функции передаются два параметра: from и text.

    function showMessage(from, text) { // параметры: from, text
        alert(from + ': ' + text);
    }

    showMessage('Аня', 'Привет!'); // Аня: Привет! (*)
    showMessage('Аня', "Как дела?"); // Аня: Как дела? (**)
}
/*---------------------------------------*/

/*          Значения по умолчанию           */
{
    //Если при вызове функции аргумент не был указан, то его значением становится undefined.
    //Это можно исправить задав значение по умолчанию

    function showMessage(from, text = "текст не добавлен") {
        alert( from + ": " + text );
    }

    showMessage("Аня"); // Аня: текст не добавлен

    //В данном случае "текст не добавлен" это строка, но на её месте могло бы быть и более сложное выражение, 
    //которое бы вычислялось и присваивалось при отсутствии параметра.

    function showMessage(from, text = anotherFunction()) {
    // anotherFunction() выполнится только если не передан text
    // результатом будет значение text
    }

    //Ранние версии JavaScript не поддерживали параметры по умолчанию. 
    //Поэтому существуют альтернативные способы, которые могут встречаться в старых скриптах.

    //Например, явная проверка на undefined:

    function showMessage(from, text) {
        if (text === undefined) {
            text = 'текст не добавлен';
        }

        alert( from + ": " + text );
    }

    //Или с помощью оператора ||:

    function showMessage(from, text) {
        // Если значение text ложно, тогда присвоить параметру text значение по умолчанию
        // заметим, что при этом пустая строка text === "" будет также считаться отсутствующим значением
        text = text || 'текст не добавлен';
        
    }

    //Современные движки JavaScript поддерживают оператор нулевого слияния ??. Его использование будет лучшей практикой, 
    //в случае, если большинство ложных значений, таких как 0, следует расценивать как «нормальные».

    function showCount(count) {
        // если count равен undefined или null, показать "неизвестно"
        alert(count ?? "неизвестно");
    }
    showCount(0); // 0
    showCount(null); // неизвестно
    showCount(); // неизвестно
}
/*---------------------------------------*/

/*          Возврат значения           */
{
    // Функция может вернуть результат, который будет передан в вызвавший её код.
    // Простейшим примером может служить функция сложения двух чисел:

    function sum(a, b) {
        return a + b;
    }

    let result = sum(1, 2);
    alert( result ); // 3

    //Возможно использовать return и без значения. Это приведёт к немедленному выходу из функции.

    function showMovie(age) {
        if ( !checkAge(age) ) {
            return;
        }

        alert( "Вам показывается кино" ); // (*)
        // ...
    }

    //Если функция не возвращает значения, это всё равно, как если бы она возвращала undefined:

    function doNothing() { /* пусто */ }

    alert( doNothing() === undefined ); // true

    //Пустой return аналогичен return undefined:

    function doNothing() {
        return;
    }

    alert( doNothing() === undefined ); // true
}
/*---------------------------------------*/

/*          Возврат значения           */
{

}
/*---------------------------------------*/