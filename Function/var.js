'use sctrict';
/*          Для «var» не существует блочной области видимости          */
{

    if (true) {
        var test = true; // используем var вместо let
    }
      
    alert(test); // true, переменная существует вне блока if
    
    // Аналогично для циклов: var не может быть блочной
    // или локальной внутри цикла:

    for (var i = 0; i < 10; i++) {
    // ...
    }
    
    alert(i); // 10, переменная i доступна вне цикла, т.к. является глобальной переменной

    // Если блок кода находится внутри функции, 
    // то var становится локальной переменной в этой функции:

    function sayHi() {
    if (true) {
        var phrase = "Привет";
    }

    alert(phrase); // срабатывает и выводит "Привет"
    }

    sayHi();
    alert(phrase); // Ошибка: phrase не определена (видна в консоли разработчика)
}
/*---------------------------------------*/
/*          «var» допускает повторное объявление          */
{

    // Если в блоке кода дважды объявить одну и ту же переменную let, будет ошибка:

    let user;
    // let user; // SyntaxError: 'user' has already been declared

    // Используя var, можно переобъявлять переменную сколько угодно раз. 
    // Повторные var игнорируются:

    var user = "Pete";

    var user; // ничего не делает, переменная объявлена раньше
    // ...нет ошибки

    alert(user); // Pete

    // Если дополнительно присвоить значение, 
    // то переменная примет новое значение:

    var user = "Pete";

    var user = "John";

    alert(user); // John

}
/*---------------------------------------*/
/*          «var» обрабатываются в начале запуска функции          */
{

    function sayHi() {
        phrase = "Привет";
      
        alert(phrase);
      
        var phrase;
    }
    sayHi();

    // …Технически полностью эквивалентен следующему 
    // (объявление переменной var phrase перемещено в начало функции):

    function sayHi() {
    var phrase;

    phrase = "Привет";

    alert(phrase);
    }
    sayHi();

    // …И даже коду ниже (как вы помните, блочная область видимости игнорируется):

    function sayHi() {
    phrase = "Привет"; // (*)

    if (false) {
        var phrase;
    }

    alert(phrase);
    }
    sayHi();

    // Объявления переменных «всплывают», но присваивания значений – нет.

    // Это проще всего продемонстрировать на примере:

    function sayHi() {
    alert(phrase);

    var phrase = "Привет";
    }

    sayHi();

    // Объявление переменной обрабатывается в начале выполнения функции 
    // («всплывает»), однако присвоение значения всегда происходит в той строке кода,
    // где оно указано. Т.е. код выполняется по следующему сценарию:

    function sayHi() {
    var phrase; // объявление переменной срабатывает вначале...

    alert(phrase); // undefined

    phrase = "Привет"; // ...присвоение - в момент, когда исполнится данная строка кода.
    }

    sayHi();

}
/*---------------------------------------*/
/*          итого          */
{

    // Существует 2 основных отличия var от let/const:

    // Переменные var не имеют блочной области видимости, 
    // они ограничены, как минимум, телом функции.
    // Объявления (инициализация) переменных varпроизводится в 
    // начале исполнения функции (или скрипта для глобальных переменных).
    // Есть ещё одно небольшое отличие, относящееся к глобальному объекту, 
    // мы рассмотрим его в следующей главе.

    // Эти особенности, как правило, не очень хорошо влияют на код. 
    // Блочная область видимости – это удобно. Поэтому много лет назад let и const 
    // были введены в стандарт и сейчас являются 
    // основным способом объявления переменных.

    // Проводим курсы п

}
/*---------------------------------------*/
/*          итого          */
{

}
/*---------------------------------------*/
/*          итого          */
{

}
/*---------------------------------------*/